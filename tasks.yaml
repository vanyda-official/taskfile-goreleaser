version: '3'

vars:
  DEFAULT_GORELEASER_DOCKER_REGISTRY: '{{ .DOCKER_REGISTRY | default "ghcr.io/johndoe/project-name" }}'
  DEFAULT_GORELEASER_SOURCE: '{{ .SOURCE | default "https://github.com/johndoe/project-name" }}'
  DEFAULT_GORELEASER_NAME: '{{ .NAME | default "project-name" }}'
  DEFAULT_GORELEASER_DISPLAY_NAME: '{{ .DISPLAY_NAME | default "Project Name" }}'
  DEFAULT_GORELEASER_DESCRIPTION: '{{ .DESCRIPTION | default "Project description..." }}'
  DEFAULT_GORELEASER_GITHUB_OWNER: '{{ .GITHUB_OWNER | default "johndoe" }}'
  DEFAULT_GORELEASER_GITHUB_REPOSITORY: '{{ .GITHUB_REPOSITORY | default "my-repo-name" }}'
  DEFAULT_GORELEASER_GITHUBACTION_FILENAME: '{{ .ROOT_DIR }}/.github/workflows/goreleaser.yml'
  DEFAULT_GORELEASER_CONFIG_FILENAME: '{{ .ROOT_DIR }}/.goreleaser.yaml'
  DEFAULT_GORELEASER_DOCKER_CMD: '{{ .DOCKER_CMD | default "[\"serve\"]" }}'

tasks:
  default:
    cmds:
      - task: boilerplate
      - task: ci

  ci:
    desc: Generate GitHub Action
    summary: |
      Generate a standardized goreleaser GitHub Action configuration.
      This configuration is auto-generated and should not be manually modified as it can be overwritten.
      
      The generated file should be excluded from commits.
    vars:
      GITHUBACTION_FILENAME: '{{.GITHUBACTION_FILENAME | default .DEFAULT_GORELEASER_GITHUBACTION_FILENAME}}'
    cmds:
      - mkdir -p $(dirname "{{.GITHUBACTION_FILENAME}}")
      - echo "${GITHUBACTION_CONTENT}" > "{{.GITHUBACTION_FILENAME}}"
    env:
      GITHUBACTION_CONTENT: |
        # THIS FILE HAS BEEN GENERATED BY THE COMMAND `{{.TASK}}`; DO NOT EDIT;
        #
        # Releaser workflow setup
        # https://goreleaser.com/ci/actions/
        #
        name: release
        
        # run only on tags
        on:
          push:
            tags:
              - 'v*'
        
        permissions:
          contents: write # needed to write releases
          id-token: write # needed for keyless signing
          packages: write # needed for ghcr access
        
        jobs:
          release:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
                with:
                  fetch-depth: 0 # this is important, otherwise it won't checkout the full tree (i.e. no previous tags)
              - uses: actions/setup-go@v4
                with:
                  go-version: 1.21
                  cache: true
              - uses: sigstore/cosign-installer@v3.2.0         # installs cosign
              - uses: anchore/sbom-action/download-syft@v0.14.3 # installs syft
              - uses: docker/login-action@v3                   # login to ghcr
                with:
                  registry: ghcr.io
                  username: ${{ "{{ github.repository_owner }}" }}
                  password: ${{ "{{ secrets.GITHUB_TOKEN }}" }}
              - uses: goreleaser/goreleaser-action@v5          # run goreleaser
                with:
                  version: latest
                  args: release --clean
                env:
                  GITHUB_TOKEN: ${{ "{{ secrets.GITHUB_TOKEN }}" }}

  boilerplate:
    desc: Generate goreleaser configuration
    summary: |
      Generate goreleaser configuration.
      This configuration must be used as is and should not be modified.
      Any modification can be overwriting in the future.
      
      The generated file should be excluded from commits.

    status:
      - 'test -f "{{.CONFIG_FILENAME}}"'
    vars:
      NAME: '{{ .NAME | default .DEFAULT_GORELEASER_NAME }}'
      DESCRIPTION: '{{ .DESCRIPTION | default .DEFAULT_GORELEASER_DESCRIPTION }}'
      GITHUB_OWNER: '{{ .GITHUB_OWNER | default .DEFAULT_GORELEASER_GITHUB_OWNER }}'
      GITHUB_REPOSITORY: '{{ .GITHUB_REPOSITORY | default .DEFAULT_GORELEASER_GITHUB_REPOSITORY }}'
      CONFIG_FILENAME: '{{ .CONFIG_FILENAME | default .DEFAULT_GORELEASER_CONFIG_FILENAME }}'
      DOCKER_REGISTRY: '{{ .DOCKER_REGISTRY | default .DEFAULT_GORELEASER_DOCKER_REGISTRY }}'
      DOCKER_CMD: '{{ .DOCKER_CMD | default .DEFAULT_GORELEASER_DOCKER_CMD }}'
      SOURCE: '{{ .SOURCE | default .DEFAULT_GORELEASER_SOURCE }}'
    cmds:
      - echo "${CONFIG_CONTENT}" > "{{.CONFIG_FILENAME}}"
      - echo "${DOCKERFILE_CONTENT}" > "Dockerfile"
    env:
      DOCKERFILE_CONTENT: |
        FROM scratch

        COPY {{ .NAME }} /usr/bin/{{ .NAME }}

        ENTRYPOINT [ "/usr/bin/{{ .NAME }}" ]

        CMD {{ .DOCKER_CMD }}
      CONFIG_CONTENT: |
        # THIS FILE HAS BEEN GENERATED BY THE COMMAND `{{.TASK}}`; DO NOT EDIT;
        # See also: .github/workflows/release.yml
        
        project_name: {{ .NAME }}
        
        release:
          github:
            owner: {{ .GITHUB_OWNER }}
            name: {{ .GITHUB_REPOSITORY }}
        
        # setups builds for linux and darwin on amd64 and arm64
        # https://goreleaser.com/customization/build
        builds:
          - env:
              - CGO_ENABLED=0
            goos:
              - linux
              - darwin
            goarch:
              - amd64
              - arm64
            main: ./cmd/{{ .NAME }}
            # ensures mod timestamp to be the commit timestamp
            mod_timestamp: '{{ "{{ .CommitTimestamp }}" }}'
            flags:
              # trims path
              - -trimpath
            ldflags:
              # use commit date instead of current date as main.date
              # only needed if you actually use those things in your main package, otherwise can be ignored.
              - -s -w -X main.version={{ "{{.Version}}" }} -X main.commit={{ "{{.Commit}}" }} -X main.date={{ "{{ .CommitDate }}" }} -X main.buildSource={{ "{{ .GitURL }}" }}
        
        # proxies from the go mod proxy before building
        # https://goreleaser.com/customization/gomod
        gomod:
          proxy: false
        
        # config the checksum filename
        # https://goreleaser.com/customization/checksum
        checksum:
          name_template: 'checksums.txt'
        
        # create a source tarball
        # https://goreleaser.com/customization/source/
        source:
          enabled: true
        
        # creates SBOMs of all archives and the source tarball using syft
        # https://goreleaser.com/customization/sbom
        sboms:
          - artifacts: archive
          - id: source # Two different sbom configurations need two different IDs
            artifacts: source
        
        # signs the checksum file
        # all files (including the sboms) are included in the checksum, so we don't need to sign each one if we don't want to
        # https://goreleaser.com/customization/sign
        signs:
          - cmd: cosign
            env:
              - COSIGN_EXPERIMENTAL=1
            certificate: '${artifact}.pem'
            args:
              - sign-blob
              - '--output-certificate=${certificate}'
              - '--output-signature=${signature}'
              - '${artifact}'
              - "--yes" # needed on cosign 2.0.0+
            artifacts: checksum
            output: true
        
        # create a docker image
        # https://goreleaser.com/customization/docker
        dockers:
          - image_templates:
              - '{{ .DOCKER_REGISTRY }}:{{ "{{ .Tag }}" }}'
            dockerfile: Dockerfile
            build_flag_templates:
              - "--pull"
              - "--label=org.opencontainers.image.created={{ "{{.Date}}" }}"
              - "--label=org.opencontainers.image.name={{ "{{.ProjectName}}" }}"
              - "--label=org.opencontainers.image.revision={{ "{{.FullCommit}}" }}"
              - "--label=org.opencontainers.image.version={{ "{{.Version}}" }}"
              - "--label=org.opencontainers.image.description={{ .DESCRIPTION }}"
              - "--label=org.opencontainers.image.source={{ .SOURCE }}"
        
        # signs our docker image
        # https://goreleaser.com/customization/docker_sign
        docker_signs:
          - cmd: cosign
            env:
              - COSIGN_EXPERIMENTAL=1
            artifacts: images
            output: true
            args:
              - 'sign'
              - '${artifact}'
              - "--yes" # needed on cosign 2.0.0+